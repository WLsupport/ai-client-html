<?php

namespace Aimeos\Client\Html\Account\Profile\Account;

use Illuminate\Support\Facades\Log;

/**
 * Default implementation of acount profile address HTML client.
 *
 * @package Client
 * @subpackage Html
 */
class Standard
    extends \Aimeos\Client\Html\Common\Client\Summary\Base
    implements \Aimeos\Client\Html\Common\Client\Factory\Iface
{

    /** client/html/account/profile/address/subparts
     * List of HTML sub-clients rendered within the account profile address section
     *
     * The output of the frontend is composed of the code generated by the HTML
     * clients. Each HTML client can consist of serveral (or none) sub-clients
     * that are responsible for rendering certain sub-parts of the output. The
     * sub-clients can contain HTML clients themselves and therefore a
     * hierarchical tree of HTML clients is composed. Each HTML client creates
     * the output that is placed inside the container of its parent.
     *
     * At first, always the HTML code generated by the parent is printed, then
     * the HTML code of its sub-clients. The address of the HTML sub-clients
     * determines the address of the output of these sub-clients inside the parent
     * container. If the configured list of clients is
     *
     *  array( "subclient1", "subclient2" )
     *
     * you can easily change the address of the output by readdressing the subparts:
     *
     *  client/html/<clients>/subparts = array( "subclient1", "subclient2" )
     *
     * You can also remove one or more parts if they shouldn't be rendered:
     *
     *  client/html/<clients>/subparts = array( "subclient1" )
     *
     * As the clients only generates structural HTML, the layout defined via CSS
     * should support adding, removing or readdressing content by a fluid like
     * design.
     *
     * @param array List of sub-client names
     * @since 2019.07
     * @category Developer
     */
    private $subPartPath = 'client/html/account/profile/account/subparts';
    private $subPartNames = [];

    protected function getSubClientNames(): array
    {
        return [];
    }

    public function getSubClient(string $type, string $name = null): \Aimeos\Client\Html\Iface
    {
        // TODO: Implement getSubClient() method.
    }

    /**
     * Returns the HTML code for insertion into the body.
     *
     * @param string $uid Unique identifier for the output if the content is placed more than once on the same page
     * @return string HTML code
     */
    public function getBody(string $uid = ''): string
    {
        $view = $this->getView();

        $html = '';
        foreach( $this->getSubClients() as $subclient ) {
            $html .= $subclient->setView( $view )->getBody( $uid );
        }
        $view->addressBody = $html;

        /** client/html/account/profile/address/template-body
         * Relative path to the HTML body template of the account profile address client.
         *
         * The template file contains the HTML code and processing instructions
         * to generate the result shown in the body of the frontend. The
         * configuration string is the path to the template file relative
         * to the templates directory (usually in client/html/templates).
         *
         * You can overwrite the template file configuration in extensions and
         * provide alternative templates. These alternative templates should be
         * named like the default one but with the string "standard" replaced by
         * an unique name. You may use the name of your project for this. If
         * you've implemented an alternative client class as well, "standard"
         * should be replaced by the name of the new class.
         *
         * @param string Relative path to the template creating code for the HTML page body
         * @since 2019.07
         * @category Developer
         * @see client/html/account/profile/address/template-header
         */
        $tplconf = 'client/html/account/profile/account/template-body';
        $default = 'account/profile/account-body-standard';

        return $view->render( $view->config( $tplconf, $default ) );
    }

    /**
     * Processes the input, e.g. store given values.
     *
     * A view must be available and this method doesn't generate any output
     * besides setting view variables if necessary.
     */
    public function process()
    {
        $view = $this->getView();

        if( !$view->param( 'account/save' ) ) {
            return parent::process();
        }

        /** @var \Aimeos\Controller\Frontend\Customer\Standard $cntl */
        $cntl = \Aimeos\Controller\Frontend::create( $this->getContext(), 'customer' );
        $oldPassword = $cntl->get()->getPassword();
        $values = $view->param('account', []);

        $isNew = $values['customer.newpassword'] !== $values['customer.oldpassword'];
        $confirmed = $values['customer.newpassword'] === $values['customer.confirmnewpassword'];

        $errors = [];

        if (!$isNew) {
            $errors['isNew'] = "The given password is not new!";
        }

        if (!$confirmed) {
            $errors["confirm"] = "New passwords doesnt match!";
        }

        $cntl = $cntl->add($values);

        if ( $oldPassword === $cntl->get()->getPassword() ) {
                $errors['oldPassword'] = "Wrong password!";
        }

        $view->passwordChanged = count(array_keys($errors)) === 0;

        if (count(array_keys($errors)) > 0) {
            $view->passwordErrors = $errors;
        }

        $cntl->store();

        parent::process();
    }
}
